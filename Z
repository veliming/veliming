#include <linux/watchdog.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <getopt.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>   

#define  WDOG_DEV   "/dev/watchdog"
#define VERSION "1.0.0"

// define option table
static const struct option longopts[] = {
    {"help", no_argument, NULL, 'h'},
    {"version", no_argument, NULL, 'v'},
    // TODO::
    {"start", no_argument, NULL, '1'},
    {"stop", no_argument, NULL, '0'},
    {"gettimeleft", no_argument, NULL, 'g'},
    {"settimeout", required_argument, NULL, 's'},
    {"ping", no_argument, NULL, 'p'},
    // ----------
    {NULL, 0, NULL, 0}};

// Print help info.
static void print_help(const char *progname) 
{
    printf("Usage: %s [OPTION]...\n", progname);
    printf("Options:\n");
    printf("  -h, --help              display this help\n");
    printf("  -v, --version           display version information\n");
    // TODO::
    printf("  -1, --start             Start the watchdog timer and daemon feed the dog\n");
    printf("  -0, --stop              Turns off the watchdog timer and kills the corresponding dog-feeding daemon\n");
    printf("  -g, --gettimeleft       Gets the watchdog timer countdown\n");
    printf("  -s, --settimeout=NUM    modify the watchdog timeout as NUM\n");
    printf("  -p, --ping              Implement feeding the dog once(dev)\n");
    // ----------
}

static void print_version()
{
    printf("%s\n", VERSION);
}

int main(int argc,char *argv[])
{
    int optc;
    const char *program_name = basename(argv[0]);

    int timeout = 0;
    int timeleft = 0;
    int options = 0;
    int state = -1;

    struct watchdog_info info;
    int watchdog;
    
    while ((optc = getopt_long(argc, argv, "hv10gs:p", longopts, NULL)) != -1)
    {
        switch (optc)
        {
        //help
        case 'h':
            print_help(program_name);
            goto success;
            break;
        //version
        case 'v':
            print_version();
            goto success;
            break;
        //start
        case '1':
            watchdog = open("/dev/watchdog", O_WRONLY);
            if (watchdog == -1)
            {
                printf("\nFAILED to open /dev/watchdog\n");
            }

            options = WDIOS_ENABLECARD;
            state = -1;
            state = ioctl(watchdog, WDIOC_SETOPTIONS, &options);
            if (0 != state)
            {
                printf("\nFailure to open watchdog\n");
                goto err;
            }
            else
            {
                printf("\nSuccess to open watchdog\n");
                goto daemon;
            }
            break;
        //stop
        case '0':
            watchdog = open("/dev/watchdog", O_WRONLY);
            if (watchdog == -1)
            {
                printf("\nFAILED to open /dev/watchdog\n");
            }

            options = WDIOS_DISABLECARD;
            state = -1;
            state = ioctl(watchdog, WDIOC_SETOPTIONS, &options);
            if (0 != state)
            {
                printf("\nFailure to close watchdog.\n");
                goto err;
            }
            else
            {
                printf("\nSuccess to close watchdog.\n");
                goto success;
            }
            break;
        //gettimeleft
        case 'g':
            watchdog = open("/dev/watchdog", O_WRONLY);
            if (watchdog == -1)
            {
                printf("\nFAILED to open /dev/watchdog\n");
            }

            state = -1;
            

            state = ioctl(watchdog, WDIOC_GETTIMELEFT, &timeleft);
            if (0 != state)
            {
                printf("\nFailure to get watchdog timeleft. %d\n", timeleft);
                goto err;
            }
            else
            {
                printf("\nThe timeout was is %d seconds.\n", timeleft);
                goto success;
            }
            break;
        //settimeout
        case 's':
            watchdog = open("/dev/watchdog", O_WRONLY);
            if (watchdog == -1)
            {
                printf("\nFAILED to open /dev/watchdog\n");
            }

            state = -1;          
            timeout = atoi(optarg);
            state = ioctl(watchdog, WDIOC_SETTIMEOUT, &timeout);
            if (0 != state)
            {
                printf("\nFailure to set watchdog timeout.\n");
                goto err;
            }
            else
            {
                printf("\nTimeout set success.\n");
                goto success;
            }
            break;
        //ping
        case 'p':
            watchdog = open("/dev/watchdog", O_WRONLY);
            if (watchdog == -1)
            {
                printf("\nFAILED to open /dev/watchdog\n");
            }

            state = -1;
            state = ioctl(watchdog, WDIOC_KEEPALIVE, NULL);
            if (0 != state)
            {
                printf("\nPing failure.\n");
                goto err;
            }
            else
            {
                printf("\nPing success.\n");
                goto success;
            }
            break;
        default:
            printf("\nError in input parameters.\n");
            print_help(program_name);
            goto err;
            break;
        }
    }

success:
    close(watchdog);
    exit(EXIT_SUCCESS);

err:
    close(watchdog);
    exit(EXIT_FAILURE);

daemon:
    if(0 == daemon(0, 0))
	{
		printf("daemon error\n");
        goto err;

	}

    while (1)
    {
        ioctl(watchdog, WDIOC_GETTIMELEFT, &timeleft);
        printf("The timeout was is %d seconds\n", timeleft);
        if (timeleft <= 5)
        {
            ioctl(watchdog, WDIOC_KEEPALIVE, NULL);
            printf("ping!\n");
        }
        sleep(1);
    }

    return 0;
}
